@inject HttpClient Http



<div class="videoplay-container">
    @if (videoInfos != null)
    {
        <MudSelect @bind-Value="videoSelected" Class="mb-2" Modal="true" FullWidth="true">
            @foreach (var videoInfo in videoInfos)
            {
                <MudSelectItem Value="videoInfo">@videoInfo.Titulo</MudSelectItem>
            }
        </MudSelect>
        @if (videoSelected == null)
        {
            <MudText Color="Color.Error">Nenhum vídeo selecionado.</MudText>
        } else
        {
            <div class="videoplay-content">
                <MudPaper Elevation="4" Class="p-6 mb-6 w-100 text-center">
                    <MudText Typo="Typo.h4" GutterBottom="true">@videoSelected.Titulo</MudText>
                    @if (!string.IsNullOrEmpty(videoSelected.Image?.Url))
                    {
                        <MudImage Src="@videoSelected.Image.Url" Alt="Imagem do informativo" Class="mb-4 rounded" Style="max-width:100%;height:auto;" />
                    }
                    <MudText Typo="Typo.body1" Class="mb-2">@videoSelected.Descricao</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">@videoSelected.Data</MudText>
                </MudPaper>
                <MudPaper Elevation="2" Class=" justify-center align-center p-4 w-100">
                    <MudText Class="pt-2"><b>Vídeo</b></MudText>
                    <br />
                     <iframe src="@URLVideo"
                         title="YouTube video player"
                         frameborder="0"
                         allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                         referrerpolicy="strict-origin-when-cross-origin"
                         allowfullscreen
                        class="youtube-embed-container-iframe"/>
                    
                </MudPaper>
            </div>
        }
        
    }
    else
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="mb-4" />
        <MudText>Carregando...</MudText>
    }
</div>


@code {
    Data.VideoInfo[] videoInfos { get; set; }
    Data.VideoInfo? videoSelected { get; set; }
    [Parameter]
	public string URLInfo { get; set; }
    protected override async Task OnInitializedAsync()
    {
        videoInfos = await Http.GetFromJsonAsync<Data.VideoInfo[]>(URLInfo);
		videoSelected = videoInfos?.FirstOrDefault();
        ShouldRender();
    }
    public string URLVideo
    {
        get
        {
            if (videoInfos != null)
            {
                return videoSelected.Url?.Url ?? string.Empty;
            }
            return string.Empty;
        }
    }
}
